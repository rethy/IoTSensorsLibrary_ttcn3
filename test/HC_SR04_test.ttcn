///////////////////////////////////////////////////////////////////////
// Copyright (c) 2000-2018
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
// Contributors:
// 	  Gyorgy Rethy
// version R1A
////////////////////////////////////////////////////////////////////////
// Cheap and widely used ultrasonic distance measure sensor today
// See a quite comprehensive user guide by Marlin P. Jones at
// https://www.mpja.com/download/hc-sr04_ultrasonic_module_user_guidejohn.pdf
//
// !!!DISABLE DEBUG logging in runtime configuration file when you don't
// need it severely, this will give ~-1..+1 cm preciceness/30 cm in good
// conditions
////////////////////////////////////////////////////////////////////////
module HC_SR04_test {

import from GPIOPinPort all;
import from GPIO_Common all;
import from HC_SR04_UltrasonicDistanceMeter all;

modulepar integer tsp_pin_trigger, tsp_pin_echo;

modulepar integer noMeasurements:=10;

type record of record {
  integer noMeas,
  integer distance,
  float deviation
} MeasurementsList


////////////////////////////////////////////////////////////////////////
//
// Test case to check f_HCSR04_measureDistance; it makes a series of
// distance measurements of 1,2,3,... up to the defined noMeasurements
//
////////////////////////////////////////////////////////////////////////
// @status           verified
////////////////////////////////////////////////////////////////////////
testcase TC_HC_SR04() runs on GPIO_Base {

  var DistResult v_result;
  var MeasurementsList v_measList;
  var integer i, distancesSum:=0, validMeasurements:=0;
  
  f_GPIO_init(pin_direction_OUT,{tsp_pin_trigger});
  f_GPIO_init(pin_direction_IN,{tsp_pin_echo});  
  
  for(i:=0;i<noMeasurements;i:=i+1){
    v_result:=f_HCSR04_measureDistance(tsp_pin_trigger,tsp_pin_echo,i+1);
    v_measList[i].noMeas:=i+1;
    v_measList[i].distance:=v_result.distance;
    v_measList[i].deviation:=v_result.deviation;
    if(v_measList[i].distance>0) {
      distancesSum:=distancesSum+v_measList[i].distance;
      validMeasurements:=validMeasurements+1;
      setverdict(pass);
    }
  }
  
  f_GPIO_cleanUp({tsp_pin_trigger,tsp_pin_echo});

  if(validMeasurements==0){
    setverdict(inconc,"No valid measurement has been done")
  } else {
    log("MEASURED average of averages=",distancesSum/validMeasurements,
      "  no. of valid measurements=",validMeasurements,"\nMeasurement results:")
    for(i:=0;i<lengthof(v_measList);i:=i+1){
      log(v_measList[i])
    }
  }
}


control{
  execute(TC_HC_SR04(),10.0);
}
}
